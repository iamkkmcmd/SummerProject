n <- nrow(X)
# calculating Y
Y <- as.matrix(X^2+rnorm(n))
## Design Matrix
D <- X %>%
mutate(one = 1,
x2 = x^2) %>%
relocate(one,x,x2) %>%
as.matrix
## Computing Coefficient Matrix
thetahat <- solve(t(D)%*%D)%*%t(D)%*%Y
## Computing HAT matrix
H = (diag(1,nrow=n,ncol=n)-D%*%solve(t(D)%*%D)%*%t(D))
## Computing Residuals
resid <- H%*%Y
## Computing estimated variance
sigma2hat <- (t(resid)%*%resid)/(n-3) # sum(resid^2)/(n-3)
## Standard Error
sigmahat <- sigma2hat*solve(t(D)%*%D)
# critical value from t-distribution for given alpha and df n-3
tau <- qt(p = 1-alpha/2, df = n-3)
## Covariance Matrix of Theta.hat
a <- thetahat[3]^2 - sigmahat[2,2]*tau^2
b <- 2*(thetahat[2]*thetahat[3]-sigmahat[1,2]*tau^2)
c <- thetahat[2]^2 - sigmahat[1,1]*tau^2
# checking condition
if (a > 0) {
lower = (-b - sqrt(b^2-4*a*c))/(2*a)
upper = (-b + sqrt(b^2-4*a*c))/(2*a)
# print lower and upper bound of confidence interval
print(c(lower,upper))
} else {
print("Error")
}
}
# read the data
trees <- read_delim("./../Desktop/canada/lab6/Trees.txt", delim = "\t")
# required data
X <- trees %>% mutate(x = as.numeric(diam)) %>% select(x)
# calculating Y
Y <- as.matrix(X^2+rnorm(nrow(X)))
# making the required funtion
confidence_region <- function(X, Y, alpha){
# getting number of rows in the data
n <- nrow(X)
## Design Matrix
D <- X %>%
mutate(one = 1,
x2 = x^2) %>%
relocate(one,x,x2) %>%
as.matrix
## Computing Coefficient Matrix
thetahat <- solve(t(D)%*%D)%*%t(D)%*%Y
## Computing HAT matrix
H = (diag(1,nrow=n,ncol=n)-D%*%solve(t(D)%*%D)%*%t(D))
## Computing Residuals
resid <- H%*%Y
## Computing estimated variance
sigma2hat <- (t(resid)%*%resid)/(n-3) # sum(resid^2)/(n-3)
## Standard Error
sigmahat <- sigma2hat*solve(t(D)%*%D)
# critical value from t-distribution for given alpha and df n-3
tau <- qt(p = 1-alpha/2, df = n-3)
## Covariance Matrix of Theta.hat
a <- thetahat[3]^2 - sigmahat[2,2]*tau^2
b <- 2*(thetahat[2]*thetahat[3]-sigmahat[1,2]*tau^2)
c <- thetahat[2]^2 - sigmahat[1,1]*tau^2
# checking condition
if (a > 0) {
lower = (-b - sqrt(b^2-4*a*c))/(2*a)
upper = (-b + sqrt(b^2-4*a*c))/(2*a)
# print lower and upper bound of confidence interval
print(c(lower,upper))
} else {
print("Error")
}
}
confidence_region(X, Y, 0.05)
# load the libraries
library(dplyr)
library(readr)
library(utils)
library(ggplot2)
# read the data
trees <- read_delim("./../Desktop/canada/lab6/Trees.txt", delim = "\t")
# required data
X <- trees %>% mutate(x = as.numeric(diam)) %>% select(x)
# calculating Y
Y <- as.matrix(X^2+rnorm(nrow(X)))
# making the required funtion
confidence_region <- function(X, Y, alpha){
# getting number of rows in the data
n <- nrow(X)
## Design Matrix
D <- X %>%
mutate(one = 1,
x2 = x^2) %>%
relocate(one,x,x2) %>%
as.matrix
## Computing Coefficient Matrix
thetahat <- solve(t(D)%*%D)%*%t(D)%*%Y
## Computing HAT matrix
H = (diag(1,nrow=n,ncol=n)-D%*%solve(t(D)%*%D)%*%t(D))
## Computing Residuals
resid <- H%*%Y
## Computing estimated variance
sigma2hat <- (t(resid)%*%resid)/(n-3) # sum(resid^2)/(n-3)
## Standard Error
sigmahat <- sigma2hat*solve(t(D)%*%D)
# critical value from t-distribution for given alpha and df n-3
tau <- qt(p = 1-alpha/2, df = n-3)
## Covariance Matrix of Theta.hat
a <- thetahat[3]^2 - sigmahat[2,2]*tau^2
b <- 2*(thetahat[2]*thetahat[3]-sigmahat[1,2]*tau^2)
c <- thetahat[2]^2 - sigmahat[1,1]*tau^2
# checking condition
if (a > 0) {
lower = (-b - sqrt(b^2-4*a*c))/(2*a)
upper = (-b + sqrt(b^2-4*a*c))/(2*a)
# print lower and upper bound of confidence interval
print(c(lower,upper))
} else {
print("Error")
}
}
confidence_region(X, Y, 0.05)
# load the libraries
library(dplyr)
library(readr)
library(utils)
library(ggplot2)
# read the data
trees <- read_delim("./../Desktop/canada/lab6/Trees.txt", delim = "\t")
# required data
X <- trees %>% mutate(x = as.numeric(diam)) %>% select(x)
# calculating Y
Y <- as.matrix(X^2+rnorm(nrow(X)))
# making the required funtion
confidence_region <- function(X, Y, alpha){
# getting number of rows in the data
n <- nrow(X)
## Design Matrix
D <- X %>%
mutate(one = 1,
x2 = x^2) %>%
relocate(one,x,x2) %>%
as.matrix
## Computing Coefficient Matrix
thetahat <- solve(t(D)%*%D)%*%t(D)%*%Y
## Computing HAT matrix
H = (diag(1,nrow=n,ncol=n)-D%*%solve(t(D)%*%D)%*%t(D))
## Computing Residuals
resid <- H%*%Y
## Computing estimated variance
sigma2hat <-  as.vector(1/(n-3)t(resid)%%resid)
# load the libraries
library(dplyr)
library(readr)
library(utils)
library(ggplot2)
# read the data
trees <- read_delim("./../Desktop/canada/lab6/Trees.txt", delim = "\t")
# required data
X <- trees %>% mutate(x = as.numeric(diam)) %>% select(x)
# calculating Y
Y <- as.matrix(X^2+rnorm(nrow(X)))
# making the required funtion
confidence_region <- function(X, Y, alpha){
# getting number of rows in the data
n <- nrow(X)
## Design Matrix
D <- X %>%
mutate(one = 1,
x2 = x^2) %>%
relocate(one,x,x2) %>%
as.matrix
## Computing Coefficient Matrix
thetahat <- solve(t(D)%*%D)%*%t(D)%*%Y
## Computing HAT matrix
H = (diag(1,nrow=n,ncol=n)-D%*%solve(t(D)%*%D)%*%t(D))
## Computing Residuals
resid <- H%*%Y
## Computing estimated variance
sigma2hat <-  as.vector(1/(n-3)*t(resid)%%resid)
## Standard Error
sigmahat <- sigma2hat*solve(t(D)%*%D)
# critical value from t-distribution for given alpha and df n-3
tau <- qt(p = 1-alpha/2, df = n-3)
## Covariance Matrix of Theta.hat
a <- thetahat[3]^2 - sigmahat[2,2]*tau^2
b <- 2*(thetahat[2]*thetahat[3]-sigmahat[1,2]*tau^2)
c <- thetahat[2]^2 - sigmahat[1,1]*tau^2
# checking condition
if (a > 0) {
lower = (-b - sqrt(b^2-4*a*c))/(2*a)
upper = (-b + sqrt(b^2-4*a*c))/(2*a)
# print lower and upper bound of confidence interval
print(c(lower,upper))
} else {
print("Error")
}
}
confidence_region(X, Y, 0.05)
# load the libraries
library(dplyr)
library(readr)
library(utils)
library(ggplot2)
# read the data
trees <- read_delim("./../Desktop/canada/lab6/Trees.txt", delim = "\t")
# required data
X <- trees %>% mutate(x = as.numeric(diam)) %>% select(x)
# calculating Y
Y <- as.matrix(X^2+rnorm(nrow(X)))
# making the required funtion
confidence_region <- function(X, Y, alpha){
# getting number of rows in the data
n <- nrow(X)
## Design Matrix
D <- X %>%
mutate(one = 1,
x2 = x^2) %>%
relocate(one,x,x2) %>%
as.matrix
## Computing Coefficient Matrix
thetahat <- solve(t(D)%*%D)%*%t(D)%*%Y
## Computing HAT matrix
H = (diag(1,nrow=n,ncol=n)-D%*%solve(t(D)%*%D)%*%t(D))
## Computing Residuals
resid <- H%*%Y
## Computing estimated variance
sigma2hat <-  as.vector(1/(n-3)*t(resid)%*%resid)
## Standard Error
sigmahat <- sigma2hat*solve(t(D)%*%D)
# critical value from t-distribution for given alpha and df n-3
tau <- qt(p = 1-alpha/2, df = n-3)
## Covariance Matrix of Theta.hat
a <- thetahat[3]^2 - sigmahat[2,2]*tau^2
b <- 2*(thetahat[2]*thetahat[3]-sigmahat[1,2]*tau^2)
c <- thetahat[2]^2 - sigmahat[1,1]*tau^2
# checking condition
if (a > 0) {
lower = (-b - sqrt(b^2-4*a*c))/(2*a)
upper = (-b + sqrt(b^2-4*a*c))/(2*a)
# print lower and upper bound of confidence interval
print(c(lower,upper))
} else {
print("Error")
}
}
confidence_region(X, Y, 0.05)
829/(1446+637)
(829/(1446+637))/2
(835/(1446+637))/2
(836/(1446+637))/2
5/843
5/843*2
5/843*2
5/(843*2)
round(pnorm(1.03, lower.tail = T), 4)
round(pnorm(1.03, lower.tail = T), 4)
round(pnorm(-0.28, lower.tail = F), 4)
round(pnorm(-0.28, lower.tail = T), 4)+round(pnorm(0, lower.tail = F), 4)
round(pnorm(-0.28, lower.tail = T), 4)+round(pnorm(1.03, lower.tail = F), 4)
round(pnorm(10, mean = 18.77, sd = 5, lower.tail = F), 4)
round(pnorm(7, mean = 18.77, sd = 5, lower.tail = T)-pnorm(6, mean = 18.77, sd = 5, lower.tail = T), 4)
round(pnorm(10, mean = 18.77, sd = 5, lower.tail = F), 4)
round(pnorm(7, mean = 18.77, sd = 5, lower.tail = T)-pnorm(6, mean = 18.77, sd = 5, lower.tail = T), 4)
round(pnorm(7, mean = 18.77, sd = 5, lower.tail = T), 4)
round(qnorm(p = 0.97, mean = 18.77, sd = 5, lower.tail = T), 2)
round(pnorm(2.61, mean = 2.62, sd = 0.06/sqrt(10), lower.tail = T), 4)
round(pnorm(2.63, mean = 2.62, sd = 0.06/sqrt(10), lower.tail = T)-pnorm(2.60, mean = 2.62, sd = 0.06/sqrt(10), lower.tail = T), 4)
round(qnorm(p = 0.27, mean = 2.62, sd = 0.06/sqrt(10), lower.tail = F), 2)
round(pnorm(2.63, mean = 2.62, sd = 0.06/sqrt(10), lower.tail = T)-pnorm(-2.63, mean = 2.62, sd = 0.06/sqrt(10), lower.tail = T), 4)
round(qnorm(p = 0.5-0.27, mean = 2.62, sd = 0.06/sqrt(10), lower.tail = F), 2)
0.5-0.27
round(qnorm(p = 0.23, mean = 2.62, sd = 0.06/sqrt(10), lower.tail = F), 2)
round(pnorm(2.63, mean = 2.62, sd = 0.06/sqrt(10), lower.tail = T)-pnorm(-2.63, mean = 2.62, sd = 0.06/sqrt(10), lower.tail = T), 4)
round(pnorm(2.63, mean = 2.62, sd = 0.06/sqrt(10), lower.tail = T), 4)
round(pnorm(2.61, mean = 2.62, sd = 0.06/sqrt(10), lower.tail = T), 4)
round(qnorm(p = 0.23, mean = 2.62, sd = 0.06/sqrt(10), lower.tail = T), 2)
round(pnorm(2.63, mean = 2.62, sd = 0.06/sqrt(10), lower.tail = T)-pnorm(2.61, mean = 2.62, sd = 0.06/sqrt(10), lower.tail = T), 4)
round(qnorm(p = 0.23, mean = 2.62, sd = 0.06/sqrt(10), lower.tail = T), 2)
round(qnorm(p = 0.23, mean = 2.62, sd = 0.06/sqrt(10), lower.tail = F), 2)
round(pnorm(2.61, mean = 2.62, sd = 0.06/sqrt(10), lower.tail = T), 4)
round(pnorm(2.63, mean = 2.62, sd = 0.06/sqrt(10), lower.tail = T)-pnorm(2.60, mean = 2.62, sd = 0.06/sqrt(10), lower.tail = T), 4)
# (2)
x1 <- c(1,2,2,4,5,7,7,8)
x2 <- c(1,2,3,4,5,6,7,8)
m <- mean(x1)
s <- sd(x1)
round(m-qt(p = 0.05/2, df = 7, lower.tail = F)*(s/sqrt(8)), 2)
round(m+qt(p = 0.05/2, df = 7, lower.tail = F)*(s/sqrt(8)), 2)
m <- mean(x2)
s <- sd(x2)
round(m-qt(p = 0.05/2, df = 7, lower.tail = F)*(s/sqrt(8)), 2)
round(m+qt(p = 0.05/2, df = 7, lower.tail = F)*(s/sqrt(8)), 2)
qnorm(p = 0.01/2, lower.tail = F)
(qnorm(p = 0.01/2, lower.tail = F)*(22/6))^2
round((qnorm(p = 0.01/2, lower.tail = F)*(22/6))^2, 0)
round((qnorm(p = 0.05/2, lower.tail = F)*(22/6))^2, 0)
round(pnorm(2.63, mean = 2.62, sd = 0.06/sqrt(10), lower.tail = T)-pnorm(2.61, mean = 2.62, sd = 0.06/sqrt(10), lower.tail = T), 4)
x <- c(0.67,0.25,1)
x <- c(0.67,0.25,1)
w <- c(3,1,6)
sum(w*x)/10
x <- c(0.67,1,.5)
w <- c(3,1,6)
sum(w*x)/10
x <- c(0.67,0.4,.67)
w <- c(3,1,6)
sum(w*x)/10
16+(16*0.67)
SS <- function(x){
return(sum((x-mean(x))^2))
}
SS(c(15,19,26,30))
SS(c(14.7,19.9,25.1,30.3))
SS(c(0.3,-0.9,0.9,-0.3))
cor(c(0.3,-0.9,0.9,-0.3))
1-(135.2/137)
1-(1.8/137)
0.0625*0.552
0.552/0.0625
116.19/16
0.493/16
20*0.493
119.77/16
0.514/16
0.514*20
(5+4+2+1+3)/5
(80+80+60+65+75)/5
x <- c(5,4,2,1,3)
y <- c(80,80,60,65,75)
mean(x)
mean(y)
x-mean(x)
y-mean(y)
(x-mean(x))*(y-mean(y))
(x-mean(x))^2
sum((x-mean(x))*(y-mean(y)))
sum((x-mean(x))^2)
50/10
72-(5*3)
12+(1.1*12)+(1.5*1)
12+(1.1*13)+(1.5*1)
(22.6-8.6)-(19.5+7.5)
(8-2.5)-(7.25+3.25)
qt(0.01/2, df = 286)
qt(0.01, df = 286)
0.03/0.008
-0.005/0.002
qt(0.05/2, df = 296)
qt(0.01/2, df = 296)
qt(0.01/2, df = 1296)
-0.02/0.06
qt(0.025, df = 26)*0.04
qt(0.975, df = 26)*0.04
((212.3-199.32)/3)/(199.32/344)
440-11
440-6
((0.237-0.234)/5)/(1-0.237^2)/429
((0.237-0.234)/5)/(1-0.237)/429
((0.237-0.234)/5)/((1-0.237)/429)
100*(exp(2.6)-1)
100*(exp(0.9)-1)
0.3/0.075
1-0.104
1-(((1-0.016^2)*39)/(40-2-1))
1-(((1-(0.016^2))*39)/(40-2-1))
1-(((1-0.016)*39)/(40-2-1))
1-(((1-0.003)*12)/(13-2-1))
1.550+(0.0010*1180)-(0.03*33)-(0.05*700)+(0.007*(700^2))
1.550+(0.0010*1180)-(0.03*0.33)-(0.05*700)+(0.007*(700^2))
1.550+(0.0010*1180)-(0.03*0.33)-(0.05*700)+(0.007*(7^2))
1.550+(0.0010*1180)-(0.03*33)-(0.05*700)+(0.007*(7^2))
1.550+(0.0010*1180)-(0.03*33)-(0.05*7)+(0.007*(7^2))
0.560/sqrt(4132)
0.45/sqrt(4000)
beta <- c(0.0010,0.03,0.05,0.007)
x <- c(1180,33,7,49)
sum(x*(beta^2))
sqrt(sum(x*(beta^2)))
beta <- c(0.00006,0.0007,0.01,0.003)
x <- c(1180,33,7,49)
sqrt(sum(x*(beta^2)))
sqrt(sum(beta*(x^2)))
beta <- c(0.00006,0.0007,0.01,0.003)
x <- c(1180,33,7,49)
sqrt(sum(beta*(x^2)))
sqrt(sum((beta^2)*(x^2)))
beta <- c(0.09,0.00006,0.0007,0.01,0.003)
x <- c(1,1180,33,7,49)
sqrt(sum((beta^2)*(x^2)))
4.7+(0.15*log(7000))+(0.10*log(11000))+(0.010*10)
exp(7.058615)
exp(7.058615)*1.35
4.5+(0.16*log(6000))+(0.12*log(12000))+(0.012*12)
exp(7.163042)*1.13
4.2+(0.2*log(4000))+(0.11*log(8000))+(0.011*7)
exp(6.924402)*1.23
0.053*100
-0.038/0.056
0.1/0.055
qt(p = 0.05/2, df = 537)
-0.301/0.072
0.171-.058
0.261+0.109
0.08/0.006
0.08/0.007
-0.154/0.065
95.21-26.1
100*(61.4/85.7)
(85.7-61.4)/61.4
(100-86)/100
(77-86)/77
x <- c(9,6,3,7,5)
y <- c(100,80,75,95,90)
mean(x)
mean(y)
x-mean(x)
y-mean(y)
(x-mean(x))*(y-mean(y))
(x-mean(x))^2
sum((x-mean(x))*(y-mean(y)))
88-24
12+(1.1*12)+(1.5*5)
12+(1.1*12)+(1.5*6)
qt(0.01, df = 286)
-0.03/0.007
440-11
440-5
((0.655-0.557)/5)/((1-0.655)/439)
((0.655-0.557)/5)/((1-0.655)/429)
-0.6/(2*0.075)
1-(((1-0.144)*476)/(477-5-1))
4.7+(0.15*log(7000))+(0.10*log(9000))+(0.010*10)
exp(7.038548)*1.35
-0.301/0.072
qt(0.05/2,  df = 536-9)
1-.586
0.09/0.007
0.09/0.008
200*0.062
(76-112)76
(76-112)/76
33-2
qnorm(p = 0.1/2)
qnorm(p = 0.01/2)
round(qnorm(p = 0.01/2),2)
round(qf(p = 0.01, df1 = 11, df2 = 31, lower.tail = F), 2)
round(qf(p = 0.01, df1 = 10, df2 = 30, lower.tail = F), 2)
round(qf(p = 0.01/2, df1 = 10, df2 = 30, lower.tail = F), 2)
round(qf(p = 0.02/2, df1 = 10, df2 = 30, lower.tail = F), 2)
round(qf(p = 0.06/2, df1 = 10, df2 = 30, lower.tail = F), 2)
round(qf(p = 0.05/2, df1 = 10, df2 = 30, lower.tail = F), 2)
qt(p = 0.005, df = 23, lower.tail = F)
# Clear environment
rm(list = ls())
graphics.off()
# Load the libraries
library(tidyverse)
# Set working directory
# setwd("D:/Project/SummerProject/notebook/")
setwd("G:/Other computers/HP/SummerProject/notebook")
# source the custom theme code
source('./custom_theme.R')
# Load the data
data <- read.csv('./../data/final_result.csv')
data %>% glimpse()
data %>%
group_by(time, type, vulnerable) %>%
summarise(avg_roa = mean(roa)) %>%
ggplot(aes(x = type, fill = factor(vulnerable),  y = avg_roa)) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(.~factor(time, labels = c('Pre COVID', 'Post COVID'))) +
labs(x = 'Type', y = 'Average Return of Assets (%)', fill = 'Vulnerable',
title = 'Average return of assets by bank type and vulnerability') +
custom_theme()
data %>%
group_by(time, type, vulnerable) %>%
summarise(avg_roa = mean(leverage)) %>%
ggplot(aes(x = type, fill = factor(vulnerable),  y = avg_roa)) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(.~factor(time, labels = c('Pre COVID', 'Post COVID'))) +
labs(x = 'Type', y = 'Average Return of Assets (%)', fill = 'Vulnerable',
title = 'Average return of assets by bank type and vulnerability') +
custom_theme()
data %>%
group_by(time, type, vulnerable) %>%
summarise(avg_roa = mean(roa)) %>%
ggplot(aes(x = type, fill = factor(vulnerable),  y = avg_roa)) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(.~factor(time, labels = c('Pre COVID', 'Post COVID'))) +
labs(x = 'Type', y = 'Average Return of Assets (%)', fill = 'Vulnerable',
title = 'Average return of assets by bank type and vulnerability') +
custom_theme()
data %>%
group_by(time, type, vulnerable) %>%
summarise(avg_roa = mean(leverage)) %>%
ggplot(aes(x = type, fill = factor(vulnerable),  y = avg_roa)) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(.~factor(time, labels = c('Pre COVID', 'Post COVID'))) +
labs(x = 'Type', y = 'Average Leverage', fill = 'Vulnerable',
title = 'Average leverage by bank type and vulnerability') +
custom_theme()
length(unique(data$nic_prod_code))
data1 <- read.table('./../map_data/76694_1_5_20221207_131853_dat.txt')
data1 <- read.table('./../map_data/76694_1_5_20221207_131853_dat.txt', sep = '|')
data1 <- read.table('./../map_data/76694_1_5_20221207_131853_dat.txt', sep = ':')
data1 %>% head()
data1 <- read.table('./../map_data/76694_1_5_20221207_131853_dat.txt', sep = '|', header = T)
